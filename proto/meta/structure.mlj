; Structure of the 'structure' language, in which declarations of legal 
; program structure are declared. This is the low-level language, probably 
; too verbose/redundant to be used by humans. Real syntaxes will be written
; in some higher-level language which gets reduced to this.
; Hang on, this is about to get circular!

; Some constraints this grammar cannot express:
; - there must be a single rule for any given type (that is, rule/type is globally unique)
; - there must be a single attr for any given type and name (that is, attr/name is unique within a rule)


(use 'meta.core)

(node :structure/language
  :rules [
  
    ; :structure/language
    ;   /rules - [ rule ]
    (node :structure/rule
      :type 
      :structure/language
      
      :attrs [
        (node :structure/sequenceAttr
          :name 
          :structure/language/rules
          
          :options [
            (node :structure/node
              :type :structure/rule)
          ]
          
          :min 0)
      ])
    
    ; :structure/rule
    ;   /type - name
    ;   /attrs - [ simpleAttr | sequenceAttr ]
    (node :structure/rule
      :type
      :structure/rule  ; think about it for a second
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/rule/type
          
          :options [
            (node :structure/name)
          ]
          
          :optional
          false)
        (node :structure/sequenceAttr
          :name
          :structure/rule/attrs
          
          :options [
            (node :structure/node
              :type :structure/simpleAttr)
            (node :structure/node
              :type :structure/sequenceAttr)
          ]
          
          :min 0)
      ])
      
    ; :structure/simpleAttr
    ;   /name - name
    ;   /options - [ node | name | enum | boolean | string | int | ref ]
    ;   /optional - boolean
    (node :structure/rule
      :type
      :structure/simpleAttr
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/simpleAttr/name
          
          :options [
            (node :structure/name)
          ]
          
          :optional
          false)
        (node :structure/sequenceAttr
          :name
          :structure/simpleAttr/options
          
          :options [
            (node :structure/node
              :type :structure/name)
            (node :structure/node
              :type :structure/enum)
            (node :structure/node
              :type :structure/boolean)
            (node :structure/node
              :type :structure/string)
            (node :structure/node
              :type :structure/int)
            (node :structure/node
              :type :structure/node)
            (node :structure/node
              :type :structure/ref)
          ]
          
          :min 1)
        (node :structure/simpleAttr
          :name 
          :structure/simpleAttr/optional
          
          :options [
            (node :structure/boolean)
          ]
          
          :optional
          false)
      ])
    
    ; :structure/sequenceAttr
    ;   /name - name
    ;   /options - [ node | name | enum | boolean | string | int | ref ]
    ;   /min - int [0..n]
    ;   /max - (int [2..n])?
    (node :structure/rule
      :type
      :structure/sequenceAttr
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/sequenceAttr/name
          
          :options [
            (node :structure/name)
          ]
          
          :optional
          false)
        (node :structure/sequenceAttr
          :name
          :structure/sequenceAttr/options
          
          :options [
            (node :structure/node
              :type :structure/name)
            (node :structure/node
              :type :structure/enum)
            (node :structure/node
              :type :structure/boolean)
            (node :structure/node
              :type :structure/string)
            (node :structure/node
              :type :structure/int)
            (node :structure/node
              :type :structure/node)
            (node :structure/node
              :type :structure/ref)
          ]
          
          :min 1)
        (node :structure/simpleAttr
          :name 
          :structure/sequenceAttr/min
          
          :options [
            (node :structure/int)
          ]
          
          :optional
          false)
        (node :structure/simpleAttr
          :name 
          :structure/sequenceAttr/max
          
          :options [
            (node :structure/int)
          ]
          
          :optional
          true)
      ])

    ; :structure/node
    ;   /type - name
    (node :structure/rule
      :type
      :structure/node
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/node/type
          
          :options [
            (node :structure/name)
          ]
          
          :optional
          false)
      ])

    ; :structure/name
    (node :structure/rule
      :type
      :structure/name
      
      :attrs [])

    ; :structure/int
    ;   TODO: limits?
    (node :structure/rule
      :type
      :structure/int
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/min
          
          :options [
            (node :structure/int)
          ]
          
          :optional 
          true)

        (node :structure/simpleAttr
          :name 
          :structure/max
          
          :options [
            (node :structure/int)
          ]
          
          :optional 
          true)
        ])

    ; :structure/boolean
    (node :structure/rule
      :type
      :structure/boolean
      
      :attrs [])

    ; :structure/ref
    ;   /type - name (type of the ref'ed node)
    (node :structure/rule
      :type
      :structure/ref
      
      :attrs [
        (node :structure/simpleAttr
          :name 
          :structure/ref/type
          
          :options [
            (node :structure/name)
          ]
          
          :optional
          false)
      ])

    ; :structure/enum
    ;   /options - [ name ]
    ; :structure/boolean
    ; :structure/string
    ;   TODO: limits?
  ])

