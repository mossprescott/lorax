; Examples for regular expressions

(use 'meta.core)

(node :core/program
  :exprs [
    (node :clojure/regex/pattern
      :term
      (node :clojure/regex/sequence
        :terms [
          (node :clojure/regex/chars 
            :str
            (node :clojure/regex/literal :str "a"))
          (node :clojure/regex/repeat
            :term
            (node :clojure/regex/chars 
              :str
              (node :clojure/regex/literal :str "b"))
            
            :min
            (node :kernel/int :value 1)
    
            :max
            (node :kernel/int :value 10))
          (node :clojure/regex/option
            :term
            (node :clojure/regex/chars 
              :str
              (node :clojure/regex/literal :str "c")))
          (node :clojure/regex/alt
            :terms [
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str "1"))
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str "2"))
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str "3"))
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str "?"))
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str "("))
              (node :clojure/regex/chars 
                :str
                (node :clojure/regex/literal :str ")"))
            ])
        ]))
        
    (node :kernel/let
      :bind
      (node :kernel/bind :lorax/id :c)
      
      :expr
      (node :kernel/string :value "cat")
      
      :body
      (node :kernel/quote
        :body
        (node :clojure/regex/pattern
          :term
          (node :clojure/regex/sequence
            :terms [
              (node :clojure/regex/chars
                :str 
                (node :clojure/regex/literal :str "It's a "))
              (node :clojure/regex/chars
                :str 
                (node :kernel/unquote
                  :body
                  (node :kernel/var
                    :ref (ref-node :c))))
              ]))))
  ])