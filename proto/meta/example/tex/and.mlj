; Snippet of the core grammar containing only the "or" node; for use as an example.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [
  ; or
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/or)
    
    :supers 
    (make-node :grammar/types [ 
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :or_left {
        :name
        (make-node :grammar/name :clojure/core/or/left)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node {
              :type :clojure/kernel/expr
            })
        ])
      })
      (make-node :grammar/attr :or_right {
        :name
        (make-node :grammar/name :clojure/core/or/right)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node {
              :type :clojure/kernel/expr
            })
        ])
      })
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/relation [
        (make-node :clojure/kernel/unquote {
          :body
          (make-node :clojure/kernel/var {
            :ref (ref-node :or_left)
          })
        })
        (make-node :view/expr/keyword { :str "or" })
        (make-node :clojure/kernel/unquote {
          :body
          (make-node :clojure/kernel/var {
            :ref (ref-node :or_right)
          })
        })
      ])
    })

    :expand
    (make-node :clojure/kernel/quote {
      :body
      (make-node :clojure/kernel/let {
        :bind 
        (make-node :clojure/kernel/bind :l_or {})
        
        :expr
        (make-node :clojure/kernel/unquote {
          :body
          (make-node :clojure/kernel/var {
            :ref (ref-node :or_left)
          })
        })
        
        :body
        (make-node :clojure/kernel/if {
          :test
          (make-node :clojure/kernel/var {
            :ref (ref-node :l_or)
          })
          
          :then
          (make-node :clojure/kernel/var {
            :ref (ref-node :l_or)
          })
          
          :else
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
              :ref (ref-node :or_right)
            })
          })
        })
      })
    })
  })
])
