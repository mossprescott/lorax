(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [

  ; ip (floor)
  (make-node :grammar/mapNode {
    :doc 
    (make-node :grammar/doc { :str "Floor (integer part) taking an expression evaluating to a c.f. and yielding an integer." })

    :type
    (make-node :grammar/type :cf/ip)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :floor_expr {
        :name
        (make-node :grammar/name :cf/ip/expr)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/delimited {
        :left :lfloor
        :right :rfloor
        :content
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :floor_expr)
          })
        })
      })
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :cf/match-xc {
        :expr
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :floor_expr)
          })
        })
        
        :coeff
        (make-node :kernel/bind :coeff_floor { :name "n" })
        
        :cont
        (make-node :kernel/bind :cont_floor { :name "d" })
        
        :then ; eval?
        (make-node :kernel/var {
          :ref (ref-node :coeff_floor)
        })
        
        :else
        ; (make-node :cf/match-v {
        ;   :expr
        ;   (make-node :kernel/unquote {
        ;     :body
        ;     (make-node :kernel/var {
        ;       :ref (ref-node :floor_expr)
        ;     })
        ;   })
        ; 
        ;   :coeff
        ;   (make-node :kernel/bind :coeff_1_floor { :name "m" })
        ;         
        ;   :then ; eval?
        ;   (make-node :kernel/var {
        ;     :ref (ref-node :coeff_1_floor)
        ;   })
        ; 
        ;   :else
          (make-node :core/fail)
        ; })
      })
    })
  })
  
  ; fp (fraction-part)
  (make-node :grammar/mapNode {
    :doc 
    (make-node :grammar/doc { :str "Fraction part taking an expression evaluating to a c.f. and yielding a c.f." })
  
    :type
    (make-node :grammar/type :cf/fp)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :fp_expr {
        :name
        (make-node :grammar/name :cf/fp/expr)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/delimited {
        :left "{"
        :right "}"
        :content
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :fp_expr)
          })
        })
      })
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :cf/match-xc {
        :expr
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :fp_expr)
          })
        })
        
        :coeff
        (make-node :kernel/bind :coeff_fp { :name "n" })
        
        :cont
        (make-node :kernel/bind :cont_fp { :name "d" })
        
        :then
        (make-node :cf/fraction {
          :coeff
          (make-node :kernel/int { :value 0 })
        
          :cont
          ; (make-node :cf/inf)
          (make-node :kernel/var {
            :ref (ref-node :cont_fp)
          })
        })
        
        :else
    ;     ; (make-node :cf/match-v {
    ;     ;   :expr
    ;     ;   (make-node :kernel/unquote {
    ;     ;     :body
    ;     ;     (make-node :kernel/var {
    ;     ;       :ref (ref-node :fp_expr)
    ;     ;     })
    ;     ;   })
    ;     ; 
    ;     ;   :coeff
    ;     ;   (make-node :kernel/bind :coeff_1_fp { :name "m" })
    ;     ;         
    ;     ;   :then
    ;     ;   (make-node :cf/fraction {
    ;     ;     :coeff
    ;     ;     (make-node :kernel/int { :value 0 })
    ;     ;   })
    ;     ;   
    ;     ;   :else
          (make-node :core/fail)
    ;     ; })
      })
    })
  })
  
  ; recip
  (make-node :grammar/mapNode {
    :doc 
    (make-node :grammar/doc { :str "Reciprocal for continued fraction values" })
  
    :type
    (make-node :grammar/type :cf/recip)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :recip_expr {
        :name
        (make-node :grammar/name :cf/recip/expr)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/scripted {
        :nucleus
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :recip_expr)
          })
        })
        
        :super
        (make-node :view/expr/juxt [
          (make-node :view/expr/symbol { :str "-" })
          (make-node :kernel/int { :value 1 })
        ])
      })
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :core/where {
        :body
        (make-node :cf/match-vc {
          :expr
          (make-node :kernel/var {
            :ref (ref-node :c_recip)
          })
          
          :coeff 
          (make-node :kernel/int { :value 0 })
        
          :cont
          (make-node :kernel/bind :cont_recip { :name "d" })
        
          :then
          (make-node :kernel/var {
            :ref (ref-node :cont_recip)
          })
          
          :else
          (make-node :cf/fraction {
            :coeff 
            (make-node :kernel/int { :value 0 })
            
            :cont
            (make-node :kernel/var {
              :ref (ref-node :c_recip)
            })
          })
        })
        
        :vars
        (make-node :core/whereVars [
          (make-node :core/whereVar {
            :bind 
            (make-node :kernel/bind :c_recip { :name "c" })
            
            :expr
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :recip_expr)
              })
            })
          })
        ])
      })
    })
  })
    
  ; plus
  (make-node :grammar/mapNode {
    :doc 
    (make-node :grammar/doc { :str "Add an integer (on the left) to a continued fraction" })
  
    :type
    (make-node :grammar/type :cf/plus)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :plus_left {
        :name
        (make-node :grammar/name :cf/plus/int)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      })
      (make-node :grammar/attr :plus_right {
        :name
        (make-node :grammar/name :cf/plus/cf)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/relation [
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :plus_left)
          })
        })
        ; (make-node :view/expr/symbol { :str :oplus })
        (make-node :view/expr/symbol { :str "+" })
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :plus_right)
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :cf/match-xc {
        :expr
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :plus_right)
          })
        })
      
        :coeff
        (make-node :kernel/bind :plus_m { :name "n" })
      
        :cont
        (make-node :kernel/bind :plus_cont { :name "d" })
        
        :then
        (make-node :cf/fraction {
          :coeff
          (make-node :core/plus {
            :left
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :plus_left)
              })
            })
            
            :right
            (make-node :kernel/var {
              :ref (ref-node :plus_m)
            })
          })
          
          :cont
          (make-node :kernel/var {
            :ref (ref-node :plus_cont)
          })
        })
        
        :else
        (make-node :core/fail)
      })
    })
  ;     (make-node :core/where {
  ;       :body
  ;       (make-node :cf/match-v {
  ;         :expr
  ;         (make-node :kernel/var {
  ;           :ref (ref-node :plus_c)
  ;         })
  ;         
  ;         :coeff
  ;         (make-node :kernel/bind :plus_n { :name "n" })
  ;         
  ;         :then
  ;         (make-node :cf/fraction {
  ;           :coeff
  ;           (make-node :core/plus {
  ;             :left
  ;             (make-node :kernel/var {
  ;               :ref (ref-node :plus_i)
  ;             })
  ;             
  ;             :right
  ;             (make-node :kernel/var {
  ;               :ref (ref-node :plus_n)
  ;             })
  ;           })
  ;         })
  ;         
  ;         :else
  ;         (make-node :cf/match-xc {
  ;           :expr
  ;           (make-node :kernel/var {
  ;             :ref (ref-node :plus_c)
  ;           })
  ;         
  ;           :coeff
  ;           (make-node :kernel/bind :plus_m { :name "m" })
  ;         
  ;           :cont
  ;           (make-node :kernel/bind :plus_cont { :name "d" })
  ;           
  ;           :then
  ;           (make-node :cf/fraction {
  ;             :coeff
  ;             (make-node :core/plus {
  ;               :left
  ;               (make-node :kernel/var {
  ;                 :ref (ref-node :plus_i)
  ;               })
  ;             
  ;               :right
  ;               (make-node :kernel/var {
  ;                 :ref (ref-node :plus_m)
  ;               })
  ;             })
  ;             
  ;             :cont
  ;             (make-node :kernel/var {
  ;               :ref (ref-node :plus_cont)
  ;             })
  ;           })
  ;           
  ;           :else
  ;           (make-node :core/fail)
  ;         })
  ;       })
  ;       
  ;       :vars
  ;       (make-node :core/whereVars [
  ;         (make-node :core/whereVar {
  ;           :bind 
  ;           (make-node :kernel/bind :plus_i { :name "i" })
  ;           
  ;           :expr
  ;           (make-node :kernel/unquote {
  ;             :body
  ;             (make-node :kernel/var {
  ;               :ref (ref-node :plus_left)
  ;             })
  ;           })
  ;         })
  ;         (make-node :core/whereVar {
  ;           :bind 
  ;           (make-node :kernel/bind :plus_c { :name "c" })
  ;           
  ;           :expr
  ;           (make-node :kernel/unquote {
  ;             :body
  ;             (make-node :kernel/var {
  ;               :ref (ref-node :plus_right)
  ;             })
  ;           })
  ;         })
  ;       ])
  ;     })
  ;   })
  })
  
  ; negate
  (make-node :grammar/mapNode {
    :doc 
    (make-node :grammar/doc { :str "Negate for continued fraction values" })
  
    :type
    (make-node :grammar/type :cf/negate)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :negate_expr {
        :name
        (make-node :grammar/name :cf/negate/expr)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/symbol { :str "-" })
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :negate_expr)
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :cf/match-xc {
        :expr
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :negate_expr)
          })
        })
        
        :coeff
        (make-node :kernel/bind :negate_n { :name "n" })

        :cont
        (make-node :kernel/bind :negate_d { :name "d" })
        
        :then
        (make-node :cf/match-v {
          :expr
          (make-node :kernel/var {
            :ref (ref-node :negate_d)
          })
          
          :coeff
          (make-node :kernel/int { :value 2 })

          :then
          (make-node :cf/fraction {
            :coeff
            (make-node :core/minus {
              :left
              (make-node :core/unaryminus {
                :expr
                (make-node :kernel/var {
                  :ref (ref-node :negate_n)
                })
              })
              
              :right
              (make-node :kernel/int { :value 1 })
            })
          
            :cont
            (make-node :cf/fraction {
              :coeff
              (make-node :kernel/int { :value 2 })
            
              :cont
              (make-node :cf/inf)
            })
          })
          
          :else
          (make-node :cf/match-vc {
            :expr
            (make-node :kernel/var {
              :ref (ref-node :negate_d)
            })
        
            :coeff
            (make-node :kernel/int { :value 1 })

            :cont
            (make-node :kernel/bind :negate_e1 { :name "e" })
        
            :then
            (make-node :cf/match-xc {
              :expr
              (make-node :kernel/var {
                :ref (ref-node :negate_e1)
              })
        
              :coeff
              (make-node :kernel/bind :negate_l { :name "l" })

              :cont
              (make-node :kernel/bind :negate_f { :name "f" })
        
              :then
              (make-node :cf/fraction {
                :coeff
                (make-node :core/minus {
                  :left
                  (make-node :core/unaryminus {
                    :expr
                    (make-node :kernel/var {
                      :ref (ref-node :negate_n)
                    })
                  })
                
                  :right
                  (make-node :kernel/int { :value 1 })
                })
              
                :cont
                (make-node :cf/fraction {
                  :coeff
                  (make-node :core/plus {
                    :left
                    (make-node :kernel/var {
                      :ref (ref-node :negate_l)
                    })
                
                    :right
                    (make-node :kernel/int { :value 1 })
                  })
                
                  :cont
                  (make-node :kernel/var {
                    :ref (ref-node :negate_f)
                  })
                })
              })
            
              :else
              (make-node :core/fail)
            })
          
            :else
            (make-node :cf/match-xc {
              :expr
              (make-node :kernel/var {
                :ref (ref-node :negate_d)
              })
        
              :coeff
              (make-node :kernel/bind :negate_m { :name "m" })

              :cont
              (make-node :kernel/bind :negate_e2 { :name "e" })                
              
              :then
              (make-node :cf/fraction {
                :coeff
                (make-node :core/minus {
                  :left
                  (make-node :core/unaryminus {
                    :expr
                    (make-node :kernel/var {
                      :ref (ref-node :negate_n)
                    })
                  })
                  
                  :right
                  (make-node :kernel/int { :value 1 })
                })
                
                :cont
                (make-node :cf/fraction {
                  :coeff
                  (make-node :kernel/int { :value 1 })
                  
                  :cont
                  (make-node :cf/fraction {
                    :coeff
                    (make-node :core/minus {
                      :left
                      (make-node :kernel/var {
                        :ref (ref-node :negate_m)
                      })
                  
                      :right
                      (make-node :kernel/int { :value 1 })
                    })
                    
                    :cont
                    (make-node :kernel/var {
                      :ref (ref-node :negate_e2)
                    })
                  })
                })
              })
              
              :else
              (make-node :cf/fraction {
                :coeff
                (make-node :core/unaryminus {
                  :expr
                  (make-node :kernel/var {
                    :ref (ref-node :negate_n)
                  })
                })
                
                :cont
                (make-node :cf/inf)
              })
            })
          })
        })
        
        :else
        (make-node :core/fail)
      })
    })
  })
   
  ; negate
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :cf/negate-2)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :negate-2_expr {
        :name
        (make-node :grammar/name :cf/negate-2/expr)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/symbol { :str "-" })
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
            :ref (ref-node :negate-2_expr)
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :core/where {
        :body
        (make-node :cf/match-x {
          :expr
          (make-node :kernel/var {
            :ref (ref-node :negate-2_c)
          })
          
          :x
          (make-node :kernel/bind :negate-2_n0 { :name "n" })
          
          :then
          (make-node :cf/fraction {
            :coeff
            (make-node :core/unaryminus {
              :expr
              (make-node :kernel/var {
                :ref (ref-node :negate-2_n0)
              })
            })
            
            :cont
            (make-node :cf/inf)
          })
          
          :else
          (make-node :cf/match-xv {
            :expr
            (make-node :kernel/var {
              :ref (ref-node :negate-2_c)
            })
          
            :x
            (make-node :kernel/bind :negate-2_n1 { :name "n" })
          
            :v
            (make-node :kernel/int { :value 2 })
            
            :then
            (make-node :cf/fraction {
              :coeff
              (make-node :core/minus {
                :left
                (make-node :core/unaryminus {
                  :expr
                  (make-node :kernel/var {
                    :ref (ref-node :negate-2_n1)
                  })
                })
                
                :right
                (make-node :kernel/int { :value 1 })
              })
            
              :cont
              (make-node :cf/fraction {
                :coeff
                (make-node :kernel/int { :value 2 })
                
                :cont
                (make-node :cf/inf)
              })
            })
            
            :else
            (make-node :cf/match-xvxc {
              :expr
              (make-node :kernel/var {
                :ref (ref-node :negate-2_c)
              })
          
              :x
              (make-node :kernel/bind :negate-2_n2 { :name "n" })
          
              :v
              (make-node :kernel/int { :value 1 })
            
              :y
              (make-node :kernel/bind :negate-2_n3 { :name "l" })
          
              :c
              (make-node :kernel/bind :negate-2_c0 { :name "d" })
          
              :then
              (make-node :cf/fraction {
                :coeff
                (make-node :core/minus {
                  :left
                  (make-node :core/unaryminus {
                    :expr
                    (make-node :kernel/var {
                      :ref (ref-node :negate-2_n2)
                    })
                  })
                
                  :right
                  (make-node :kernel/int { :value 1 })
                })
            
                :cont
                (make-node :cf/fraction {
                  :coeff
                  (make-node :core/plus {
                    :left
                    (make-node :kernel/var {
                      :ref (ref-node :negate-2_n3)
                    })
                    
                    :right
                    (make-node :kernel/int { :value 1 })
                  })
                  
                  :cont
                  (make-node :kernel/var {
                    :ref (ref-node :negate-2_c0)
                  })
                })
              })
              
              :else
              (make-node :cf/match-xxc {
                :expr
                (make-node :kernel/var {
                  :ref (ref-node :negate-2_c)
                })
          
                :x
                (make-node :kernel/bind :negate-2_n4 { :name "n" })
          
                :y
                (make-node :kernel/bind :negate-2_n5 { :name "m" })
          
                :c
                (make-node :kernel/bind :negate-2_c1 { :name "d" })
          
                :then
                (make-node :cf/fraction {
                  :coeff
                  (make-node :core/minus {
                    :left
                    (make-node :core/unaryminus {
                      :expr
                      (make-node :kernel/var {
                        :ref (ref-node :negate-2_n4)
                      })
                    })
                
                    :right
                    (make-node :kernel/int { :value 1 })
                  })
            
                  :cont
                  (make-node :cf/fraction {
                    :coeff
                    (make-node :kernel/int { :value 1 })

                    :cont
                    (make-node :cf/fraction {
                      :coeff
                      (make-node :core/minus {
                        :left
                        (make-node :kernel/var {
                          :ref (ref-node :negate-2_n5)
                        })
                    
                        :right
                        (make-node :kernel/int { :value 1 })
                      })
                  
                      :cont
                      (make-node :kernel/var {
                        :ref (ref-node :negate-2_c1)
                      })
                    })
                  })
                })
              
                :else
                (make-node :core/fail)
              })
            })
          })
        })
        
        :vars
        (make-node :core/whereVars [
          (make-node :core/whereVar {
            :bind
            (make-node :kernel/bind :negate-2_c { :name "c" })
            
            :expr
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :negate-2_expr)
              })
            })
          })
        ])
      })
    })
  })
])