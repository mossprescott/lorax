; Operations on nodes, for use in reductions and meta-programs.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [
    
  ; attr
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/attr)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :attr_node {
        :name
        (make-node :grammar/name :core/attr/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :attr_name {
        :name
        (make-node :grammar/name :core/attr/name)
      
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
      
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "attr" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :attr_node) 
              })
            })
            (make-node :view/expr/int { :str "," })
            (make-node :view/mediumspace)
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :attr_name) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "meta.core/node-attr" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :attr_node) 
            })
          })
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :attr_name) 
            })
          })
        ])
      })
    })
  })
  
  ; type
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/type)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :type_node {
        :name
        (make-node :grammar/name :core/type/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "type" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :type_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "meta.core/node-type" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :type_node) 
            })
          })
        ])
      })
    })
  })
  
  ; eval
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/eval)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :eval_node {
        :name
        (make-node :grammar/name :core/eval/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "eval" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :eval_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "meta.clojure.kernel/meta-eval" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :eval_node) 
            })
          })
        ])
      })
    })
  })
  
  ; unread
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/unread)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :unread_node {
        :name
        (make-node :grammar/name :core/unread/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "unread" })  ; TODO: better display name?
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :unread_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "meta.clojure.kernel/unread" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :unread_node) 
            })
          })
        ])
      })
    })
  })
  
  ; has?
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/has?)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :has_node {
        :name
        (make-node :grammar/name :core/has?/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :has_name {
        :name
        (make-node :grammar/name :core/has?/name)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/name })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "has?" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :has_node) 
              })
            })
            (make-node :view/expr/int { :str ","}) ; HACK?
            (make-node :view/mediumspace)
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :has_name) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "has-attr?" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :has_node) 
            })
          })
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :has_name) 
            })
          })
        ])
      })
    })
  })

    ; value: but probably what I actually want is eval?
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :core/value)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :value_expr {
          :name
          (make-node :grammar/name :core/value/expr)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :kernel/expr
              })
          ])
        })
      ])
    
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/juxt [
          (make-node :view/expr/keyword { :str "value" })
          (make-node :view/delimited { 
            :left "["
            :right "]"
            :content
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :value_expr)
              })
            })
          })
        ])
      })
      
      :expand
      (make-node :kernel/quote {
        :body
        (make-node :kernel/app {
          :expr
          (make-node :kernel/extern { :name "meta.core/node-value" })
          
          :args
          (make-node :kernel/args [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :value_expr)
              })
            })
          ])
        })
      })
    })

  ; makeNode
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/makeNode)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :makeNode_type {
        :name
        (make-node :grammar/name :core/makeNode/type)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/name })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :makeNode_content {
        :name
        (make-node :grammar/name :core/makeNode/content)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :core/nodeAttrs })
          (make-node :grammar/node { :type :kernel/expr })  ; any sequence
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "node" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :makeNode_type) 
              })
            })
            (make-node :view/expr/int { :str "," })  ; HACK
            (make-node :view/mediumspace)
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :makeNode_content) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "meta.core/make-node" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :makeNode_type) 
            })
          })
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :makeNode_content) 
            })
          })
        ])
      })
    })
  })

  ; nodeAttrs
  (make-node :grammar/seqNode {
    :type 
    (make-node :grammar/type :core/nodeAttrs)
    
    :supers 
    (make-node :grammar/types [
    ])

    :options 
    (make-node :grammar/options [
      (make-node :grammar/node { :type :core/nodeAttr })
    ])
    
    :min
    (make-node :grammar/count 0)
        
    :display
    (make-node :grammar/seq {
      :type 
      (make-node :grammar/type :view/sequence)
      
      :separator
      (make-node :view/sequence [  ; HACK
        (make-node :view/expr/int { :str "," })
        (make-node :view/mediumspace)
      ])
    })
    
    :expand
    ; (make-node :kernel/quote {
    ;   :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "merge" })
      
        :args
        (make-node :grammar/seq {
          :type 
          (make-node :grammar/type :kernel/args)
        })
      })
    ; })
  })

  ; nodeAttr
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/nodeAttr)
    
    :supers 
    (make-node :grammar/types [])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :nodeAttr_name {
        :name
        (make-node :grammar/name :core/nodeAttr/name)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/name })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :nodeAttr_value {
        :name
        (make-node :grammar/name :core/nodeAttr/value)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/relation [
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
           :ref (ref-node :nodeAttr_name) 
          })
        })
        (make-node :view/expr/symbol { :str :mapsto })
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
           :ref (ref-node :nodeAttr_value) 
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "hash-map" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :nodeAttr_name) 
            })
          })
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :nodeAttr_value) 
            })
          })
        ])
      })
    })
  })

  ; noAttrs
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/noAttrs)
    
    :supers 
    (make-node :grammar/types [])
    
    :attrs
    (make-node :grammar/attrs [])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/symbol { :str :emptyset })
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "hash-map" })
        
        :args
        (make-node :kernel/args [])
      })
    })
  })
  
  ; nodeCount
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/nodeCount)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :count_node {
        :name
        (make-node :grammar/name :core/nodeCount/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/symbol { :str "|" })  ; HACK: delimited doesn't handle "|" yet
        (make-node :kernel/unquote {
          :body
          (make-node :kernel/var {
           :ref (ref-node :count_node) 
          })
        })
        (make-node :view/expr/symbol { :str "|" })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "count" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/app {
            :expr
            (make-node :kernel/extern { :name "meta.core/node-children" })
        
            :args
            (make-node :kernel/args [
              (make-node :kernel/unquote {
                :body
                (make-node :kernel/var {
                 :ref (ref-node :count_node) 
                })
              })
            ])
          })
        ])
      })
    })
  })

  ; nodeFirst
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/nodeFirst)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :first_node {
        :name
        (make-node :grammar/name :core/nodeFirst/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "first" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :first_node) 
            })
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "first" })
        
        :args
        (make-node :kernel/args [
          (make-node :kernel/app {
            :expr
            (make-node :kernel/extern { :name "meta.core/node-children" })
        
            :args
            (make-node :kernel/args [
              (make-node :kernel/unquote {
                :body
                (make-node :kernel/var {
                 :ref (ref-node :first_node) 
                })
              })
            ])
          })
        ])
      })
    })
  })

  ; nodeRest
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/nodeRest)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :rest_node {
        :name
        (make-node :grammar/name :core/nodeRest/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "rest" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :rest_node) 
            })
          })
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :core/makeNode {
        :type
        (make-node :core/type {
          :node 
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
             :ref (ref-node :rest_node) 
            })
          })
        })

        :content
        (make-node :kernel/app {
          :expr
          (make-node :kernel/extern { :name "rest" })
        
          :args
          (make-node :kernel/args [
            (make-node :kernel/app {
              :expr
              (make-node :kernel/extern { :name "meta.core/node-children" })
        
              :args
              (make-node :kernel/args [
                (make-node :kernel/unquote {
                  :body
                  (make-node :kernel/var {
                   :ref (ref-node :rest_node) 
                  })
                })
              ])
            })
          ])
        })
      })
    })
  })

  ; missing?
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :core/missing?)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :missing_node {
        :name
        (make-node :grammar/name :core/missing?/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "missing?" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :missing_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :kernel/quote {
      :body
      (make-node :kernel/app {
        :expr
        (make-node :kernel/extern { :name "=" })
        
        :args
        (make-node :kernel/args [
      ; (make-node :core/equal {  ; Can't use core/equal before defining it!
        ; :left
          (make-node :core/type {
            :node
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
               :ref (ref-node :missing_node) 
              })
            })
          })
        ; :right
          (make-node :kernel/name { :value :view/expr/missing })
      ; })
        ])
      })
    })
  })

])
