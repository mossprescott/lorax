; Operations on nodes, for use in reductions and meta-programs.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [
    
  ; attr
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/attr)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :attr_node {
        :name
        (make-node :grammar/name :clojure/core/attr/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :attr_name {
        :name
        (make-node :grammar/name :clojure/core/attr/name)
      
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
      
        :optional false
      }) 
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "attr" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :attr_node) 
              })
            })
            (make-node :view/expr/int { :str "," })
            (make-node :view/mediumspace)
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :attr_name) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :clojure/kernel/quote {
      :body
      (make-node :clojure/kernel/app {
        :expr
        (make-node :clojure/kernel/extern { :name "meta.core/node-attr" })
        
        :args
        (make-node :clojure/kernel/args [
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :attr_node) 
            })
          })
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :attr_name) 
            })
          })
        ])
      })
    })
  })
  
  ; type
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/type)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :type_node {
        :name
        (make-node :grammar/name :clojure/core/type/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "type" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :type_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :clojure/kernel/quote {
      :body
      (make-node :clojure/kernel/app {
        :expr
        (make-node :clojure/kernel/extern { :name "meta.core/node-type" })
        
        :args
        (make-node :clojure/kernel/args [
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :type_node) 
            })
          })
        ])
      })
    })
  })
  
  ; eval
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/eval)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :eval_node {
        :name
        (make-node :grammar/name :clojure/core/eval/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "eval" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :eval_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :clojure/kernel/quote {
      :body
      (make-node :clojure/kernel/app {
        :expr
        (make-node :clojure/kernel/extern { :name "meta.clojure.kernel/meta-eval" })
        
        :args
        (make-node :clojure/kernel/args [
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :eval_node) 
            })
          })
        ])
      })
    })
  })
  
  ; missing?
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/missing?)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :missing_node {
        :name
        (make-node :grammar/name :clojure/core/missing?/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "missing?" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :missing_node) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :clojure/kernel/quote {
      :body
      ; (make-node :clojure/kernel/app {
      ;   :expr
      ;   (make-node :clojure/kernel/extern { :name "=" })
      ;   
      ;   :args
      ;   (make-node :clojure/kernel/args [
      (make-node :clojure/core/equal {
        :left
          (make-node :clojure/core/type {
            :node
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :missing_node) 
              })
            })
          })
        :right
          (make-node :clojure/kernel/name { :value :view/expr/missing })
      })
        ; ])
      ; })
    })
  })

  ; has?
  (make-node :grammar/mapNode {
    :type
    (make-node :grammar/type :clojure/core/has?)
    
    :supers 
    (make-node :grammar/types [
      (make-node :grammar/type :clojure/kernel/expr)
    ])
    
    :attrs
    (make-node :grammar/attrs [
      (make-node :grammar/attr :has_node {
        :name
        (make-node :grammar/name :clojure/core/has?/node)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/expr })
        ])
        
        :optional false
      }) 
      (make-node :grammar/attr :has_name {
        :name
        (make-node :grammar/name :clojure/core/has?/name)
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node { :type :clojure/kernel/name })
        ])
        
        :optional false
      }) 
    ])
    
    :display
    (make-node :clojure/kernel/quote {
      :body
      (make-node :view/expr/juxt [
        (make-node :view/expr/keyword { :str "has?" })
        (make-node :view/delimited {
          :left "["
          :right "]"
          :content
          (make-node :view/sequence [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :has_node) 
              })
            })
            (make-node :view/expr/int { :str ","}) ; HACK?
            (make-node :view/mediumspace)
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
               :ref (ref-node :has_name) 
              })
            })
          ])
        })
      ])
    })
    
    :expand
    (make-node :clojure/kernel/quote {
      :body
      (make-node :clojure/kernel/app {
        :expr
        (make-node :clojure/kernel/extern { :name "has-attr?" })
        
        :args
        (make-node :clojure/kernel/args [
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :has_node) 
            })
          })
          (make-node :clojure/kernel/unquote {
            :body
            (make-node :clojure/kernel/var {
             :ref (ref-node :has_name) 
            })
          })
        ])
      })
    })
  })

    ; value: but probably what I actually want is eval?
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :clojure/core/value)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :clojure/kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :value_expr {
          :name
          (make-node :grammar/name :clojure/core/value/expr)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :clojure/kernel/expr
              })
          ])
        })
      ])
    
      :display
      (make-node :clojure/kernel/quote {
        :body
        (make-node :view/expr/juxt [
          (make-node :view/expr/keyword { :str "value" })
          (make-node :view/delimited { 
            :left "["
            :right "]"
            :content
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
                :ref (ref-node :value_expr)
              })
            })
          })
        ])
      })
      
      :expand
      (make-node :clojure/kernel/quote {
        :body
        (make-node :clojure/kernel/app {
          :expr
          (make-node :clojure/kernel/extern { :name "meta.core/node-value" })
          
          :args
          (make-node :clojure/kernel/args [
            (make-node :clojure/kernel/unquote {
              :body
              (make-node :clojure/kernel/var {
                :ref (ref-node :value_expr)
              })
            })
          ])
        })
      })
    })

    ; ; binary AND
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/and
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/relation
    ;     :boxes [
    ;       (node :grammar/attr :core/id :left
    ;         :name 
    ;         :clojure/core/and/left
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/keyword :str "and")
    ;       (node :grammar/attr :core/id :right
    ;         :name 
    ;         :clojure/core/and/right
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/let
    ;         :bind 
    ;         (node :clojure/kernel/bind :core/id :l)
    ;         
    ;         :expr
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var 
    ;             :ref (ref-node :left)))
    ;         
    ;         :body
    ;         (node :clojure/kernel/if
    ;           :test
    ;           (node :clojure/core/not 
    ;             :expr
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :l)))
    ;           
    ;           :then
    ;           (node :clojure/kernel/var 
    ;             :ref (ref-node :l))
    ;           
    ;           :else
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :right)))))))
    ;     
    ; ; TODO: OR
    ;     
    ; ; binary +
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/plus
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/binary
    ;     :boxes [
    ;       (node :grammar/attr :core/id :left2
    ;         :name 
    ;         :clojure/core/plus/left
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str "+")
    ;       (node :grammar/attr :core/id :right2
    ;         :name 
    ;         :clojure/core/plus/right
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr 
    ;         (node :clojure/kernel/extern :name "+")
    ;         
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :left2)))
    ;           
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :right2)))
    ;         ])))
    ; 
    ; ; binary -
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/minus
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/binary
    ;     :boxes [
    ;       (node :grammar/attr :core/id :left3
    ;         :name 
    ;         :clojure/core/minus/left
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str "-")
    ;       (node :grammar/attr :core/id :right3
    ;         :name 
    ;         :clojure/core/minus/right
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr 
    ;         (node :clojure/kernel/extern :name "-")
    ;         
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :left3)))
    ;           
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :right3)))
    ;         ])))
    ; 
    ; ; binary *
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/times
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/binary
    ;     :boxes [
    ;       (node :grammar/attr :core/id :left4
    ;         :name 
    ;         :clojure/core/times/left
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str :times)
    ;       (node :grammar/attr :core/id :right4
    ;         :name 
    ;         :clojure/core/times/right
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr 
    ;         (node :clojure/kernel/extern :name "*")
    ;         
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :left4)))
    ;           
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :right4)))
    ;         ])))
    ; 
    ; ; binary >
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/greater
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/relation
    ;     :boxes [
    ;       (node :grammar/attr :core/id :left5
    ;         :name 
    ;         :clojure/core/greater/left
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str ">")
    ;       (node :grammar/attr :core/id :right5
    ;         :name 
    ;         :clojure/core/greater/right
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr 
    ;         (node :clojure/kernel/extern :name ">")
    ;         
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :left5)))
    ;           
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :right5)))
    ;         ])))
    ; 
    ; ; TODO: >=, <, <=, =, !=
    ; 
    ; 
    ; 
    ; ;
    ; ; Sequences
    ; ;
    ; 
    ; ; Sequence (list) constructor:
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/sequence
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/sequence
    ;     :items
    ;     (node :grammar/sequence :core/id :items1
    ;       :name 
    ;       :clojure/core/sequence/items
    ;       
    ;       :options [
    ;         (node :structure/node
    ;           :type :clojure/kernel/expr)
    ;       ]
    ;       
    ;       :min 0
    ;       
    ;       :separator
    ;       (node :view/sequence
    ;         :items [
    ;           (node :view/expr/keyword :str ",")
    ;           (node :view/thickspace)
    ;         ])))
    ;   
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/app
    ;       :expr
    ;       (node :clojure/kernel/extern
    ;         :name "list")
    ;         
    ;       :args
    ;       (node :clojure/kernel/unquote
    ;         :body
    ;         (node :clojure/kernel/var
    ;           :ref (ref-node :items1))))))
    ; 
    ; ; cons(), as "."
    ; (node :grammar/rule
    ;   :type 
    ;   :clojure/core/cons
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/expr/relation
    ;     :boxes [
    ;       (node :grammar/attr :core/id :first0
    ;         :name 
    ;         :clojure/core/cons/first
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str ".")
    ;       (node :grammar/attr
    ;         :name 
    ;         :clojure/core/cons/rest :core/id :rest0
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;   
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/app
    ;       :expr
    ;       (node :clojure/kernel/extern
    ;         :name "cons")
    ;       
    ;       :args [
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :first0)))
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :rest0)))
    ;       ])))
    ; 
    ; ; first(coll)
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/first
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/expr/juxt
    ;     :boxes [
    ;       (node :view/expr/keyword :str "first")
    ;       (node :view/parens
    ;         :left "["
    ;         :right "]"
    ;         
    ;         :content
    ;         (node :grammar/attr :core/id :coll1
    ;           :name
    ;           :clojure/core/first/coll
    ;           
    ;           :options [
    ;             (node :structure/node
    ;               :type :clojure/kernel/expr)
    ;           ]
    ;           
    ;           :optional false))
    ;     ])
    ;   
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/app
    ;       :expr
    ;       (node :clojure/kernel/extern
    ;         :name "first")
    ;       
    ;       :args [
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :coll1)))
    ;       ])))
    ; 
    ; ; rest(coll)
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/rest
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/expr/juxt
    ;     :boxes [
    ;       (node :view/expr/keyword :str "rest")
    ;       (node :view/parens
    ;         :left "["
    ;         :right "]"
    ;         
    ;         :content
    ;         (node :grammar/attr :core/id :coll2
    ;           :name
    ;           :clojure/core/rest/coll
    ;           
    ;           :options [
    ;             (node :structure/node
    ;               :type :clojure/kernel/expr)
    ;           ]
    ;           
    ;           :optional false))
    ;     ])
    ;   
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/app
    ;       :expr
    ;       (node :clojure/kernel/extern
    ;         :name "rest")
    ;       
    ;       :args [
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :coll2)))
    ;       ])))
    ; 
    ; ; subscript
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/nth
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/expr/juxt
    ;     :boxes [
    ;       (node :grammar/attr :core/id :coll0
    ;         :name
    ;         :clojure/core/nth/coll
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/parens
    ;         :left "["
    ;         :right "]"
    ;         
    ;         :content
    ;         (node :grammar/attr :core/id :index0
    ;           :name
    ;           :clojure/core/nth/index
    ;         
    ;           :options [
    ;             (node :structure/node
    ;               :type :clojure/kernel/expr)
    ;           ]
    ;         
    ;           :optional false))
    ;     ])
    ;   
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/app
    ;       :expr
    ;       (node :clojure/kernel/extern
    ;         :name "nth")
    ;       
    ;       :args [
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :coll0)))
    ;         (node :clojure/kernel/unquote
    ;           :body
    ;           (node :clojure/kernel/var
    ;             :ref (ref-node :index0)))
    ;       ])))
    ; 
    ; 
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/set
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/parens
    ;     :left "{"
    ;     :right "}"
    ;     
    ;     :content
    ;     (node :grammar/attr :core/id :coll5
    ;       :name 
    ;       :clojure/core/set/coll
    ;       
    ;       :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)          
    ;       ]
    ;       
    ;       :optional false))
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr
    ;         (node :clojure/kernel/extern
    ;           :name "set")
    ;           
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var
    ;               :ref (ref-node :coll5)))
    ;         ])))
    ; 
    ; ; in (contains?):
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/in
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display  ; TODO: quote it?
    ;   (node :view/expr/relation
    ;     :boxes [
    ;       (node :grammar/attr :core/id :elem6
    ;         :name 
    ;         :clojure/core/in/item
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;       (node :view/expr/symbol :str :in)
    ;       (node :grammar/attr :core/id :coll6
    ;         :name 
    ;         :clojure/core/in/set
    ;         
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;         
    ;         :optional false)
    ;     ])
    ;     
    ;     :expand
    ;     (node :clojure/kernel/quote
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr 
    ;         (node :clojure/kernel/extern :name "contains?")
    ;         
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :elem6)))
    ;           
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var 
    ;               :ref (ref-node :coll6)))
    ;         ])))
    ; 
    ; ; postfix factorial (not really a "core" thing, but interesting?)
    ; (node :grammar/rule
    ;   :type
    ;   :clojure/core/factorial
    ;   
    ;   :supers [ :clojure/kernel/expr ]
    ;   
    ;   :display
    ;   (node :view/expr/juxt
    ;     :boxes [
    ;       (node :grammar/attr :core/id :e3
    ;         :name
    ;         :clojure/core/factorial/expr
    ;       
    ;         :options [
    ;           (node :structure/node
    ;             :type :clojure/kernel/expr)
    ;         ]
    ;       
    ;         :optional false)
    ;       (node :view/expr/symbol :str "!")
    ;     ])
    ;     
    ;   :expand
    ;   (node :clojure/kernel/quote
    ;     :body
    ;     (node :clojure/kernel/let
    ;       :bind 
    ;       (node :clojure/kernel/bind :core/id :fact)
    ;       
    ;       :expr
    ;       (node :clojure/kernel/lambda :core/id :factr
    ;         :params [
    ;           (node :clojure/kernel/bind :core/id :n1)
    ;         ]
    ;         
    ;         :body
    ;         (node :clojure/kernel/if
    ;           :test
    ;           (node :clojure/core/greater
    ;             :left
    ;             (node :clojure/kernel/var
    ;               :ref (ref-node :n1))
    ;             
    ;             :right
    ;             (node :clojure/kernel/int :value 1))
    ;             
    ;           :then
    ;           (node :clojure/core/times
    ;             :left
    ;             (node :clojure/kernel/var
    ;               :ref (ref-node :n1))
    ;               
    ;             :right
    ;             (node :clojure/kernel/app
    ;               :expr
    ;               (node :clojure/kernel/var 
    ;                 :ref (ref-node :factr))
    ;                 
    ;               :args [
    ;                 (node :clojure/core/minus
    ;                   :left 
    ;                   (node :clojure/kernel/var
    ;                     :ref (ref-node :n1))
    ;                   
    ;                   :right
    ;                   (node :clojure/kernel/int :value 1))
    ;               ]))
    ;             
    ;             :else
    ;             (node :clojure/kernel/int :value 1)))
    ;       
    ;       :body
    ;       (node :clojure/kernel/app
    ;         :expr
    ;         (node :clojure/kernel/var
    ;           :ref (ref-node :fact))
    ;       
    ;         :args [
    ;           (node :clojure/kernel/unquote
    ;             :body
    ;             (node :clojure/kernel/var
    ;               :ref (ref-node :e3)))
    ;         ]))))
    ;
  
])
