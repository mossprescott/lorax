; Grammar/presentation for the 'kernel' language, which is directly translatable to 
; ordinary Clojure forms.
; This version uses the higher-level "grammar" language, which specifies structure as 
; well as a presentation reduction, and which can be reduced/compiled down into both a
; regular structure program and a presentation reduction.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(node :grammar/language
  :rules [
  
    (node :grammar/rule
         :type 
         :clojure/kernel/bind
         
         :supers []
         
         :display
         (node :view/expr/var :str "x"))  ; TODO

    (node :grammar/rule
      :type
      :clojure/kernel/lambda
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/flow
        :boxes [
          (node :view/expr/keyword :str "fn")
          (node :view/expr/juxt
            :boxes
            (node :grammar/sequence
              :name
              :clojure/kernel/lambda/params
            
              :options [
                (node :structure/node
                  :type :clojure/kernel/bind)
              ]
            
              :min 0
            
              :separator
              (node :view/chars :str ", " :font :cmr10)))
          
          (node :view/expr/symbol :str :to)
          
          (node :grammar/attr
            :name 
            :clojure/kernel/lambda/body
            
            :options [
              (node :structure/node
                :type :clojure/kernel/expr)
            ]
            
            :optional false)
        ]))

    (node :grammar/rule
      :type
      :clojure/kernel/app
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/flow
        :boxes [
          (node :view/expr/keyword :str "apply")
            
          (node :grammar/attr
            :name 
            :clojure/kernel/app/expr
            
            :options [
              (node :structure/node
                :type :clojure/kernel/expr)
            ]
            
            :optional false)

          (node :view/expr/keyword :str "to")
            
          (node :view/expr/juxt
            :boxes
            (node :grammar/sequence
              :name
              :clojure/kernel/app/args
            
              :options [
                (node :structure/node
                  :type :clojure/kernel/expr)
              ]
            
              :min 0
            
              :separator
              (node :view/chars :str ", " :font :cmr10)))
        ]))
        
    (node :grammar/rule
      :type
      :clojure/kernel/if
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/section
        :items [
          (node :view/expr/flow
            :boxes [
              (node :view/expr/keyword :str "if")
              (node :grammar/attr
                :name 
                :clojure/kernel/if/test
            
                :options [
                  (node :structure/node
                    :type :clojure/kernel/expr)
                ]
            
                :optional false)
            ])
          (node :view/sequence
            :items [
              (node :view/quad)
              (node :view/expr/flow
                :boxes [
                  (node :view/expr/keyword :str "then")
                  (node :grammar/attr
                    :name 
                    :clojure/kernel/if/then
            
                    :options [
                      (node :structure/node
                        :type :clojure/kernel/expr)
                    ]
            
                    :optional false)
                ])
            ])
          (node :view/sequence
            :items [
              (node :view/quad)
              (node :view/expr/flow
                :boxes [
                  (node :view/expr/keyword :str "else")
                  (node :grammar/attr
                    :name 
                    :clojure/kernel/if/else
            
                    :options [
                      (node :structure/node
                        :type :clojure/kernel/expr)
                    ]
            
                    :optional false)
                ])
            ])
        ]))

    (node :grammar/rule
      :type
      :clojure/kernel/let
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/section
        :items [
          (node :view/expr/flow
            :boxes [
              (node :view/expr/keyword :str "let")
              (node :grammar/attr
                :name 
                :clojure/kernel/let/bind
            
                :options [
                  (node :structure/node
                    :type :clojure/kernel/bind)
                ]
            
                :optional false)
              (node :view/expr/symbol :str "=")
                (node :grammar/attr
                  :name 
                  :clojure/kernel/let/expr
          
                  :options [
                    (node :structure/node
                      :type :clojure/kernel/expr)
                  ]
            
                  :optional false)
            ])
          (node :view/sequence
            :items [
              (node :view/quad)
              (node :view/expr/flow
                :boxes [
                  (node :view/expr/keyword :str "in")
                  (node :grammar/attr
                    :name 
                    :clojure/kernel/let/body
            
                    :options [
                      (node :structure/node
                        :type :clojure/kernel/expr)
                    ]
            
                    :optional false)
                ])
            ])
        ]))

    (node :grammar/rule
      :type
      :clojure/kernel/var
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/juxt  ; HACK
        :boxes [
          (node :grammar/attr  ; TODO: a special :grammar construct for refs?
            :name 
            :clojure/kernel/var/ref
    
            :options [
              (node :structure/ref
                :type :clojure/kernel/bind)
              (node :structure/ref
                :type :clojure/kernel/lambda)
            ]
            
            :optional false)
        ]))

    (node :grammar/rule
      :type
      :clojure/kernel/extern
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/sequence
        :items [
          (node :view/expr/mono :str "\"")
          (node :view/expr/mono
            :str
            (node :grammar/attr
              :name 
              :clojure/kernel/extern/name
          
              :options [
                (node :structure/string)
              ]
            
              :optional false))
          (node :view/expr/mono :str "\"")
        ]))
        
    (node :grammar/rule
      :type
      :clojure/kernel/int
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/int
        :str
        (node :grammar/attr
          :name 
          :clojure/kernel/int/value
          
          :options [
            (node :structure/int)
          ]
            
          :optional false)))
        
    (node :grammar/rule
      :type
      :clojure/kernel/string
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/string
        :str
        (node :grammar/attr
          :name 
          :clojure/kernel/string/value
          
          :options [
            (node :structure/string)
          ]
            
          :optional false)))
        
    (node :grammar/rule
      :type
      :clojure/kernel/true
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/keyword
        :str "true"))
          
    (node :grammar/rule
      :type
      :clojure/kernel/false
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/keyword
        :str "false"))
          
    (node :grammar/rule
      :type
      :clojure/kernel/nil
      
      :supers [ :clojure/kernel/expr ]
      
      :display
      (node :view/expr/keyword
        :str "nil"))
          
  ])
