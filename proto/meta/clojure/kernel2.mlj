; Grammar/presentation for the 'kernel' language, which is directly translatable to 
; ordinary Clojure forms (and therefore no expansions are provided).
; This is part 2 of 2, broken up for the benefit of the figure in the paper!
;
; This version uses the higher-level "grammar" language, which specifies structure as 
; well as a presentation reduction, and which can be reduced/compiled down into both a
; regular structure program and a presentation reduction.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [
    ; bind
    (make-node :grammar/mapNode {
        :type 
        (make-node :grammar/type :kernel/bind)
       
        :supers
        (make-node :grammar/types [])
       
        :attrs
        (make-node :grammar/attrs [
            (make-node :grammar/attr :bind_name {
                :name
                (make-node :grammar/name :kernel/bind/name)
              
                :options
                (make-node :grammar/options [
                    (make-node :grammar/string)
                  ])
    
                :optional true
              })
          ])
    
        ; Note: this reduction never actually occurs, because bindings, like 
        ; all nodes that introduce names, are reduced by the special name 
        ; reduction prior to the reduction driven by the grammar.
        ; :display
        ; (make-node :kernel/quote {
        ;   :body
        ;   (make-node :view/expr/var { 
        ;     :str "?" 
        ;   })
        ; })
      })
    
    ; var
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/var)
      
      :supers
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :var_ref {
          :name
          (make-node :grammar/name :kernel/var/ref)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/ref {
              :type :kernel/bind
            })
            (make-node :grammar/ref {
              :type :kernel/lambda
            })
          ])
          
          :optional false
        })
      ])
    
      :display
      (make-node :kernel/var {
        :ref (ref-node :var_ref)
      })
    })
        
    ; lambda
    (make-node :grammar/mapNode {
        :type
        (make-node :grammar/type :kernel/lambda)
      
        :supers 
        (make-node :grammar/types [ 
            (make-node :grammar/type :kernel/expr)
          ])
        
        :attrs
        (make-node :grammar/attrs [
            (make-node :grammar/attr :lambda_params {
                :name
                (make-node :grammar/name :kernel/lambda/params)
              
                :options
                (make-node :grammar/options [
                    (make-node :grammar/node {
                        :type :kernel/params
                      })
                  ])
    
                :optional false
              })
            (make-node :grammar/attr :lambda_body {
                :name
                (make-node :grammar/name :kernel/lambda/body)
              
                :options
                (make-node :grammar/options [
                    (make-node :grammar/node {
                        :type :kernel/expr
                      })
                  ])
    
                :optional false
              })
          ])
      
        :display
        (make-node :kernel/quote {
          :body
          (make-node :view/expr/flow [
            (node :view/expr/keyword :str "fn")
  
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :lambda_params)
              })
            })
          
            (node :view/expr/symbol :str :to)
        
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :lambda_body)
              })
            })
          ])              
        })
      })
      
      (make-node :grammar/seqNode {
        :type
        (make-node :grammar/type :kernel/params)
      
        :supers 
        (make-node :grammar/types [])
        
        :options
        (make-node :grammar/options [
          (make-node :grammar/node {
              :type
              :kernel/bind
            })
        ])
          
        :min
        0
        
        :display
        (make-node :grammar/seq {
          ; :ref
          ; (ref-node ???)
        
          :type
          (make-node :grammar/type
            :view/expr/juxt)
            
          :separator
          (make-node :view/sequence [
            (make-node :view/expr/keyword {
              :str "," 
            })
            (make-node :view/thickspace)
          ])
        })
      })
      
    ; recur
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/recur)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])

      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :recur_args {
          :name 
          (make-node :grammar/name :kernel/recur/args)
            
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
              :type :kernel/args
            })
          ])
          
          :optional false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/sequence [
          (make-node :view/expr/keyword { :str "recur" })
          (make-node :view/thinspace)
          (make-node :view/delimited {
            :left "("
            :right ")"
            :content 
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :recur_args)
              })
            })
          })
        ])
      })
    })
      
    ; app        
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/app)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])

      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :app_expr {
          :name 
          (make-node :grammar/name :kernel/app/expr)
            
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
              :type :kernel/expr
            })
          ])
          
          :optional false
        })
        (make-node :grammar/attr :app_args {
          :name 
          (make-node :grammar/name :kernel/app/args)
            
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
              :type :kernel/args
            })
          ])
          
          :optional false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/juxt [
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
              :ref (ref-node :app_expr)
            })
          })
          ; (make-node :view/thinspace)
          (make-node :view/delimited {
            :left "("
            :right ")"
            :content 
            (make-node :kernel/unquote {
              :body
              (make-node :kernel/var {
                :ref (ref-node :app_args)
              })
            })
          })
        ])
      })
    })
    
    ; args (exprList?)
    (make-node :grammar/seqNode {
      :type
      (make-node :grammar/type :kernel/args)
    
      :supers 
      (make-node :grammar/types [])
      
      :options
      (make-node :grammar/options [
          (make-node :grammar/node {
              :type
              :kernel/expr
            })
        ])
        
      :min
      0
      
      :display
      (make-node :grammar/seq {
          ; :ref
          ; (ref-node ???)
        
          :type
          (make-node :grammar/type
            :view/sequence)
            
          :separator
          (make-node :view/sequence [
            (make-node :view/expr/int {
              :str "," 
            })
            (make-node :view/thickspace)
          ])
        })
    })
    
    ; if
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/if)
      
      :supers 
      (make-node :grammar/types [
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :if_test {
          :name
          (make-node :grammar/name :kernel/if/test)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type
                :kernel/expr
              })
          ])
          
          :optional false
        }) 
        (make-node :grammar/attr :if_then {
          :name
          (make-node :grammar/name :kernel/if/then)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type
                :kernel/expr
              })
          ])
          
          :optional false
        }) 
        (make-node :grammar/attr :if_else {
          :name
          (make-node :grammar/name :kernel/if/else)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :kernel/expr
              })
          ])
          
          :optional false
        }) 
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/flow [
          (make-node :view/expr/keyword { :str "if" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :if_test)
            })
          })
          (make-node :view/expr/keyword { :str "then" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :if_then)
            })
          })
          (make-node :view/expr/keyword { :str "else" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :if_else)
            })
          })
        ])
      })
    })

    ; let
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/let)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :let_bind {
          :name
          (make-node :grammar/name :kernel/let/bind)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :kernel/bind
              })
          ])
          
          :optional false
        })
        (make-node :grammar/attr :let_expr {
          :name
          (make-node :grammar/name :kernel/let/expr)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :kernel/expr
              })
          ])
          
          :optional false
        })
        (make-node :grammar/attr :let_body {
          :name
          (make-node :grammar/name :kernel/let/body)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
                :type :kernel/expr
              })
          ])
          
          :optional false
        })
      ])

      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/flow [
          (make-node :view/expr/keyword { :str "let" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :let_bind)
            })
          })
          (make-node :view/expr/symbol { :str "=" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :let_expr)
            })
          })
          (make-node :view/expr/keyword { :str "in" })
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :let_body)
            })
          })
        ])
      })
    })
              
    ; ; fail
    ; (make-node :grammar/mapNode {
    ;   :type 
    ;   (make-node :grammar/type :kernel/fail)
    ;  
    ;   :supers
    ;   (make-node :grammar/types [
    ;     (make-node :grammar/type :kernel/expr)
    ;   ])
    ;  
    ;   :attrs
    ;   (make-node :grammar/attrs [])
    ;   
    ;   :display
    ;   (make-node :kernel/quote {
    ;     :body
    ;     (make-node :view/expr/keyword { :str "fail" })
    ;   })
    ; })
    
    ; TODO: loop
  ])
