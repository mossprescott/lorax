; Grammar/presentation for the 'kernel' language, which is directly translatable to 
; ordinary Clojure forms (and therefore no expansions are provided).
; This is part 1 of 2, broken up for the benefit of the figure in the paper!
;
; This version uses the higher-level "grammar" language, which specifies structure as 
; well as a presentation reduction, and which can be reduced/compiled down into both a
; regular structure program and a presentation reduction.

(use 'meta.core)  ; ignored by load-nodes, but should make this file legal Clojure

(make-node :grammar/language [
    ; nil
    (make-node :grammar/mapNode {
        :type
        (make-node :grammar/type :kernel/nil)
      
        :supers 
        (make-node :grammar/types [ 
            (make-node :grammar/type :kernel/expr)
          ])
      
        :attrs
        (make-node :grammar/attrs [])
        
        :display
        (make-node :kernel/quote {
            :body
            (node :view/expr/keyword
              :str "nil")
          })
      })
    
    ; true   
    (make-node :grammar/mapNode {
        :type
        (make-node :grammar/type :kernel/true)
    
        :supers
        (make-node :grammar/types [ 
            (make-node :grammar/type :kernel/expr)
          ])
        
        :attrs
        (make-node :grammar/attrs [])
        
        :display
        (make-node :kernel/quote {
            :body
            (node :view/expr/keyword
              :str "true")
          })
      })
        
    ; false
    (make-node :grammar/mapNode {
        :type
        (make-node :grammar/type :kernel/false)
      
        :supers
        (make-node :grammar/types [ 
            (make-node :grammar/type :kernel/expr)
          ])
      
        :attrs
        (make-node :grammar/attrs [])
        
        :display
        (make-node :kernel/quote {
            :body
            (node :view/expr/keyword
              :str "false")
          })
      })
      
    ; int
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/int)
    
      :supers
      (make-node :grammar/types [
          (make-node :grammar/type :kernel/expr)
        ])
    
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :int_value {
          :name
          (make-node :grammar/name :kernel/int/value)

          :options
          (make-node :grammar/options [
            (node :grammar/int)
          ])
      
          :optional
          false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/int {
          :str
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/app {
              :expr
              (make-node :kernel/extern { :name "format" })
                      
              :args 
              (make-node :kernel/args [
                (make-node :kernel/string { :value "%,d" })
                (make-node :core/value {
                  :expr
                ; (make-node :kernel/app {
                ;   :expr
                ;   (make-node :kernel/extern { :name "meta.core/node-value" })
                ;       
                ;   :args 
                ;   (make-node :kernel/args [
                    (make-node :kernel/var {
                      :ref (ref-node :int_value) 
                    })
                ;   ])
                ; })
                })
              ])
            })
          })
        })
      })
    })
    
    ; string
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/string)
    
      :supers
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
    
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :string_value {
          :name
          (make-node :grammar/name :kernel/string/value)

          :options
          (make-node :grammar/options [
            (node :grammar/string)
          ])
      
          :optional
          false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/string {
          :str
          (make-node :kernel/unquote {
            :body
            ; (make-node :kernel/app {
            ;   :expr
            ;   (make-node :kernel/extern { :name "meta.core/node-value" })
            ;           
            ;   :args 
            ;   (make-node :kernel/args [
                (make-node :kernel/var {
                  :ref (ref-node :string_value) 
                })
            ;   ])
            ; })
          })
        })
      })
    })
      
    ; name
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/name)
    
      :supers
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
    
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :name_value {
          :name
          (make-node :grammar/name :kernel/name/value)

          :options
          (make-node :grammar/options [
            (node :grammar/nameValue)
          ])
      
          :optional
          false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/name {
          ; TODO: color? raw keyword isn't right; a color attribute here
          ; is not propagated through the reduction to :view, though
          ; (make-node :kernel/name { :value :view/drawable/color })
          ; (make-node :kernel/quote {
          ;   :body
          ;   (make-node :view/rgb { :red 0.2 :green 0.2 :blue 0.5 })
          ; })
          
          :str
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/app {
              :expr
              (make-node :kernel/extern { :name "subs" })
          
              :args
              (make-node :kernel/args [
                (make-node :kernel/app {
                  :expr
                  (make-node :kernel/extern { :name "str" })
          
                  :args
                  (make-node :kernel/args [
                    (make-node :kernel/app {
                      :expr
                      (make-node :kernel/extern { :name "meta.core/node-value" })
          
                      :args 
                      (make-node :kernel/args [
                        (make-node :kernel/var {
                          :ref (ref-node :name_value) 
                        })
                      ])
                    })
                  ])
                })
                (make-node :kernel/int { :value 1 })
              ])
            })
          })
        })
      })
    })
    
    ; extern
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/extern)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :extern_name {
          :name
          (make-node :grammar/name :kernel/extern/name)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/string)
          ])
          
          :optional false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/mono {
          :str
          (make-node :kernel/unquote {
            :body 
            (make-node :kernel/var {
              :ref (ref-node :extern_name)
            })
          })
        })
      })
    })
  
    ; quote
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/quote)
      
      :supers 
      (make-node :grammar/types [ 
        (make-node :grammar/type :kernel/expr)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :quote_body {
          :name
          (make-node :grammar/name :kernel/quote/body)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
              :type :kernel/expr
            })
          ])
          
          :optional false
        })
      ])
      
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/embed {
          :content
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
              :ref (ref-node :quote_body)
            })
          })
        })
      })
    })
    
    ; unquote
    (make-node :grammar/mapNode {
      :type
      (make-node :grammar/type :kernel/unquote)
      
      :supers 
      (make-node :grammar/types [ 
        ; Note: unquote is legal _anywhere_, because the node it evaluates to
        ; can't be checked until evaluation time (unless you have a type system)
        (make-node :grammar/star)
      ])
      
      :attrs
      (make-node :grammar/attrs [
        (make-node :grammar/attr :unquote_levels {
          :name
          (make-node :grammar/name :kernel/unquote/levels)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/int)
          ])
          
          :optional true
        })
        (make-node :grammar/attr :unquote_body {
          :name
          (make-node :grammar/name :kernel/unquote/body)
          
          :options
          (make-node :grammar/options [
            (make-node :grammar/node {
              :type :kernel/expr
            })
          ])
          
          :optional false
        })
      ])
      
      ; TODO: show # of levels?
      :display
      (make-node :kernel/quote {
        :body
        (make-node :view/expr/disembed {
          :levels
          ; Note: this is awful--want to keep the levels attr optional for now
          ; but can't use any syntax in this grammar, so have to everything 
          ; using raw kernel syntax...
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/if {
              :test
              (make-node :kernel/app {
                :expr
                (make-node :kernel/extern { :name "=" })
                
                :args
                (make-node :kernel/args [
                  (make-node :kernel/app {
                    :expr
                    (make-node :kernel/extern { :name "node-type" })
                    
                    :args
                    (make-node :kernel/args [
                      (make-node :kernel/var {
                        :ref (ref-node :unquote_levels)
                      })
                    ])
                  })
                  (make-node :kernel/name { :value :view/expr/missing })
                ])
              })
                          
              :then
              (make-node :kernel/int { :value 1 })
            
              :else
              (make-node :kernel/var {
                :ref (ref-node :unquote_levels)
              })
            })
          })

          :content
          (make-node :kernel/unquote {
            :body
            (make-node :kernel/var {
              :ref (ref-node :unquote_body)
            })
          })
        })
      })
    })

  ])
