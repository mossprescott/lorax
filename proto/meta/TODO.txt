DONE - make "missing" node indicators blue (establishing a convention for notation added during the presentation reduction)

presentation reduction:
  DONE - white b/g (for constrast)
  - use b/g color for 'meta' levels (white, blue, red, green, ..., all unsaturated)
  - use an outline for selection
  - better underline for errors (squiggle?)
  - auto-font sizing for fractions/scripts

fancier grammar language
  - compile presentation to a reduction fxn
  - presentation for the :grammar language itself (_in_ itself?)

Pseudo-REPL
	- kernel/program
	- evaluate each expression and render result
	- un-read: convert clojure data structures to syntax

integrated grammar/reduction language
	- pattern matching?
		- check the syntax of the patterns
		- allow bindings in the patterns
	

clojure/core
	- constructors: list, map
	- essential operators
	- list comprehensions
	- several lambda forms (lightweight to heavyweight)


editing:
	- selection actions: next/previous sibling, parent, first child
    - paths?
    - zipper?
	- bug in selection hilite: paren in :app in some cases, lambda in let, 
	- show selected node in separate view, with info on each child


- quote/unquote
  - better rendering

	
rendering:
	- :view/scripted - /sub
	- :view/over - /lineweight
	- :view/radical (later)
	- :view/array - layout, alignment?
	
infrastructure:
	- svn project
	- some way to declare what language is in force in each file?
	
big picture:
	- REPL - evaluate one statement at a time, with statements to introduce syntax
	