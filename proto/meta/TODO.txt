selection:
- selection of sequences
- selection of string, int
- disable the buttons
- select :missing nodes
- ordering of :view/scripted attributes (the only one so far that isn't implicitly ordered)

regex
- reduction to compiled pattern? compile-time vs. run-time?

:clojure/core
- map
- essential operators
- list comprehensions
- several lambda forms (lightweight to heavyweight)

Better name reduction



Make it real:
- Make string, int, float, bool values a form of node, so their ids can be 
tracked for editing purposes.
- make display also a quoted expression, so you can write arbitrary code...


presentation reduction:
  DONE - white b/g (for contrast)
  DONE - use b/g color for 'meta' levels (white, blue, red, green, ..., all unsaturated)
  DONE - use an outline for selection
  - better underline for errors (squiggle?)
  - auto-font sizing for fractions/scripts 
    - need inherited attributes in the reduction
    - and a way to be sensitive to the path (e.g. super/subscript)

Pseudo-REPL
	DONE! - start with core/program (not kernel/program, which should go away)
	DONE! - evaluate each expression and render result
	- un-read: convert clojure data structures to syntax
	- a way to introduce new syntax!

integrated grammar/reduction language
	- pattern matching?
		- check the syntax of the patterns
		- allow bindings in the patterns
	

editing:
	- selection actions: next/previous sibling, parent, first child
    - paths?
    - zipper?
	- bug in selection hilite: paren in :app in some cases, lambda in let, 
	- show selected node in separate view, with info on each child

	
rendering:
	- :view/scripted - /sub
	- :view/over - /lineweight
	- :view/radical (later)
	- :view/array - layout, alignment?
	- :view/parens
	
infrastructure:
	- some way to declare what language is in force in each file?
	
big picture:
	- REPL - evaluate one statement at a time, with statements to introduce syntax
